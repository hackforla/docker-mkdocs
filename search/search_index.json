{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docker MkDocs","text":"<p>This repo contains the source code to build the docker image used by Hack for LA developers to work on MkDocs documentation. The image enables the deployment of a local MkDocs website with a single command.</p> <p>The image is hosted at Hack for LA's repo on DockerHub. It contains MkDocs and plugins used by Hack for LA projects. We will update the plugins list and package versions as needed.</p> <p>For full documentation, visit https://hackforla.github.io/docker-mkdocs.</p>"},{"location":"#project-context","title":"Project Context","text":"<p>At Hack for LA, we have projects that utilize many different core technologies. We chose MkDocs which is a documentation site generator that works well with any of them. We provide this docker image as an option for projects so they won't have to go through the setup steps on their own.</p>"},{"location":"#for-projects","title":"For Projects","text":"<p>Projects can use the image by referencing it directly in a docker-compose.yml or the commandline. The recommended way is to create a docker-compose.yml file. See the User Guide for instructions. From there, projects are free to configure the site as needed.</p> <p>Projects can also extend the image to add MkDocs plugins and dependencies if needed. See the User Guide for instructions</p> <p>When it's determined useful, projects can request that their plugin be incorporated into this image by opening a pull request from a fork.</p>"},{"location":"#for-maintainers","title":"For Maintainers","text":"<p>Maintainers can update package versions, add MkDocs plugins, or add system dependencies. See the Maintainer Guide for details.</p> <p>Maintainers can build and upload a test image to the docker hub repository for testing. Once the main branch is updated, the github workflow will build and push an image to docker hub. See the Maintainer Guide for details.</p>"},{"location":"#technology-used","title":"Technology used","text":"<ul> <li>python</li> <li>mkdocs</li> <li>docker</li> <li>github actions</li> <li>docker hub</li> <li>poetry</li> </ul>"},{"location":"#contact-info","title":"Contact info","text":"<p>Please post in the #engineering hackforla slack channel for any issues.</p>"},{"location":"#licensing","title":"Licensing","text":"<p>This code is made available under the GNU General Public Licence v2.0</p>"},{"location":"dive/","title":"Dive","text":"<p>A tool to explore docker images by layer</p> <p>github project</p>"},{"location":"dive/#examine-image-layer-contents","title":"Examine image layer contents","text":"<p>One useful functionality of this tool is to examine the contents of each layer. For example, it revealed python bytecode (*.pyc) files in the image that were taking up as much space as the python packages. That prompted some research to eliminate the bytecode files to significantly reduce the image size.</p> <p>Here are the steps to recreate that view</p> <ol> <li> <p>Start the tool</p> <pre><code>dive hackforlaops/mkdocs:testing\n</code></pre> </li> <li> <p>Move to the relevant layer using the arrow keys</p> </li> <li> <p>Press Tab to switch to layer view (moves cursor to the right pane)</p> </li> <li> <p>Press Ctrl+U to hide unmodified files in the layer</p> </li> <li> <p>Press Ctrl+O to sort by size to see what's taking up the most space</p> </li> <li> <p>Press Space to toggle collapse/expand directory contents</p> </li> </ol>"},{"location":"docker/","title":"Docker","text":""},{"location":"docker/#how-to-remove-extra-project-files-from-docker-image","title":"How to remove extra project files from docker image","text":"<p>We use the <code>.dockerignore</code> file for this. It marks project files to skip when building the docker image.</p> <ol> <li> <p>Look into the image to find extra unneeded files</p> <ol> <li> <p>Run a shell in the docker image</p> <pre><code>docker run -it image_name sh\n</code></pre> </li> <li> <p>Look at the directory structure</p> <pre><code>ls\n</code></pre> </li> </ol> </li> <li> <p>Add the extra files and paths in <code>.dockerignore</code></p> </li> <li> <p>Rebuild the image</p> </li> </ol>"},{"location":"docker/#cache-mount","title":"Cache mount","text":"<p>This helps speed up subsequent docker builds by caching intermediate files and reusing them across builds. It's available with docker buildkit. The key here is to disable anything that could delete the cache, because we want to preserve it. The cache mount is not going to end up in the docker image being built, so there's no concern about disk space usage.</p> <p>Put this flag between <code>RUN</code> and the command</p> <pre><code>RUN \\\n--mount=type=cache,target=/root/.cache\n  pip install -r requirements.txt\n</code></pre> <p>For pip, the files are by default stored in <code>/root/.cache/pip</code>.  Pip caching docs For apk, the cache directory is <code>/var/cache/apk/</code>. APK wiki on local cache</p> References <ul> <li>buildkit mount the cache</li> <li>proper usage of mount cache</li> <li>mount cache reference</li> </ul>"},{"location":"docker/#reducing-the-image-size","title":"Reducing the image size","text":"<p>There are methods to do this on many levels. All of these methods contribute to reduce the final image size, either by skipping generation of intermediate files or by removing them afterward. We list the commonly-recommended methods here although we opted to use cache mount instead, which speeds up image rebuilds. The methods discussed here may be more suitable for a CI environment.</p> <p>!!! Note \"<code>mkdocs-material</code> <code>babel</code> dependency</p> <pre><code>`mkdocs-material` theme added `babel` as a dependency starting at version 9.2. As a result, the docker image size increased from &lt;30MB to around 40MB. This is unavoidable.\n</code></pre>"},{"location":"docker/#docker_1","title":"Docker","text":"<ol> <li> <p>Docker cache mount</p> <p>We use this method instead of ones which disable caching. See cache mount above. There's no need to delete any files since they're in a cache mount that's not part of the docker image.</p> </li> </ol>"},{"location":"docker/#python","title":"Python","text":"<ol> <li> <p>Skip bytecode (.pyc) generation</p> <p>Python docs on <code>PYTHONDONTWRITEBYTECODE</code></p> env variablecommand env <p>Set this environment variable</p> <pre><code>ENV PYTHONDONTWRITEBYTECODE 1\n</code></pre> <p>Set the <code>-B</code> flag for python</p> <pre><code>RUN python3 -B -m pip install -r requirements.txt\n</code></pre> </li> <li> <p>Pycache prefix and rm</p> <p>Python docs on <code>PYTHONPYCACHEPREFIX</code></p> <ol> <li> <p>Tell python to write <code>.pyc</code> files in a mirror directory</p> env variableflag <p>Set this environment variable to make python store all pycache bytecode files under some directory</p> <pre><code>ENV PYTHONPYCACHEPREFIX=/root/.cache/pycache/\n</code></pre> <p>Use the commandline flag for python</p> <pre><code>RUN python3 -X pycache_prefix=/root/.cache/pycache/ -m pip install -r requirements.txt\n</code></pre> </li> <li> <p>Remove the files in the same RUN command by appending this to the end</p> <pre><code>&amp;&amp; rm -rf /root/.cache/pycache/\n</code></pre> </li> </ol> </li> </ol>"},{"location":"docker/#pip","title":"Pip","text":"<ol> <li> <p>Don't compile python into byte code</p> <p>Pass the flag into pip to skip generating <code>pyc</code> files during install</p> <pre><code>RUN pip install --no-compile -r requirements.txt\n</code></pre> </li> <li> <p>Disable caching</p> <p>Pip docs on caching</p> env variableflag <p>Set this environment variable</p> <pre><code>ENV PIP_NO_CACHE_DIR=1\n</code></pre> <p>Pass this flag into pip</p> <pre><code>RUN pip install --no-cache-dir -r requirements.txt\n</code></pre> </li> </ol>"},{"location":"docker/#clean-build","title":"Clean build","text":"<p>Combineable flags can be passed into a docker or docker-compose build to force a clean build. See docker build options</p> <ol> <li> <p>Try to download the latest base image</p> <pre><code>docker-compose build --pull\n</code></pre> </li> <li> <p>Disable caching. Build everything</p> <pre><code>docker-compose build --no-cache\n</code></pre> </li> </ol>"},{"location":"dockerhub/","title":"DockerHub","text":"<p>Docker Hub is a container registry hosted by Docker. It is the default whenever docker requests an image. Hosting our image here ensures that it's accessible by anyone.</p>"},{"location":"dockerhub/#getting-started","title":"getting started","text":"References <pre><code>https://docs.docker.com/docker-hub/quickstart/\nhttps://www.linux.com/training-tutorials/how-use-dockerhub/\n</code></pre> <p>todo: connect a repository to a package</p> old notes <p>I created a repo in my account called local-mkdocs The follow commands logs into dockerhub, tags the local image as testing, and pushes it to dockerhub</p> <pre><code>docker login --username=hackforlaops\ndocker images\ndocker tag b6047b203915 hackforlaops/local-mkdocs:testing\ndocker push hackforlaops/local-mkdocs:testing\n</code></pre>"},{"location":"dockerhub/#how-to-create-an-access-token","title":"How to create an access token","text":""},{"location":"dockerhub/#token-vs-password","title":"Token vs password","text":"<p>Docker tokens can be passed in as docker passwords. The difference is passwords can be renewed while tokens remain in use. Tokens are created with different access levels and can be revoked individually for different clients.</p> <p>We need write access to be able to push images, but not the ability to delete them, so a token is the better way.</p>"},{"location":"dockerhub/#create-the-token","title":"Create the token","text":"<ol> <li> <p>Create New Access Token in DockerHub.</p> <ol> <li>In the upper-right, click on your username &gt; Account Settings list item &gt; Security tab</li> <li>Click the New Access Token button</li> <li>For the Description, enter <code>docker-mkdocs action push</code></li> <li>For Permissions, choose <code>Read, Write</code></li> <li>Click the Generate button</li> <li>Copy and save the token</li> </ol> </li> <li> <p>Test login with the token</p> <pre><code>docker login -u hackforlaops\nPassword: # pass in the token at the prompt\n...\nLogin succeeded\n</code></pre> </li> <li> <p>Test tag and push the image</p> <pre><code>docker images\ndocker tag b6047b203915 hackforlaops/mkdocs:testing # (1)!\ndocker push hackforlaops/mkdocs:testing\n</code></pre> <ol> <li>The hash value is from the images list for the docker-mkdocs image in the local system</li> </ol> </li> </ol>"},{"location":"dockerhub/#create-workflow","title":"Create workflow","text":"References <p>https://github.com/docker/login-action</p> <ol> <li> <p>Create action secrets in github so that different forks can configure and push to their own dockerhub accounts</p> <pre><code>DOCKER_USERNAME\nDOCKER_TOKEN\n</code></pre> </li> <li> <p>See <code>.github/workflows/build-image.yml</code> for complete configuration</p> </li> </ol>"},{"location":"git/","title":"git","text":""},{"location":"git/#working-on-code","title":"working on code","text":"<p>see changed files</p> <pre><code>git st\n</code></pre> <p>commit changed files</p> <pre><code>git ci -a -m\"docs: export requirements file\"\n</code></pre> <p>amend last commit with staged changes</p> <pre><code>git amend -a\ngit amend -a -m\"docs: useful git commands\"\n</code></pre> <p>add untracked file to git</p> <pre><code>git add docs/git.md\n</code></pre> <p>rebase to the beginning</p> <pre><code>git rebase --interactive --root main\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>                GNU GENERAL PUBLIC LICENSE\n                   Version 2, June 1991\n</code></pre> <p>Copyright (C) 1989, 1991 Free Software Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.  This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it.  (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.)  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.</p> <p>Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software.  If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.</p> <p>Finally, any free program is threatened constantly by software patents.  We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary.  To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                GNU GENERAL PUBLIC LICENSE\n</code></pre> <p>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</p> <ol> <li>This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License.  The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language.  (Hereinafter, translation is included without limitation in the term \"modification\".)  Each licensee is addressed as \"you\".</li> </ol> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.</p> <ol> <li>You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.</li> </ol> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p> <ol> <li> <p>You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p> <p>a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.</p> <p>b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</p> <p>c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License.  (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)</p> </li> </ol> <p>These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.</p> <p>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <ol> <li> <p>You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:</p> <p>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p> <p>b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p> <p>c) Accompany it with the information you received as to the offer to distribute corresponding source code.  (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)</p> </li> </ol> <p>The source code for a work means the preferred form of the work for making modifications to it.  For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable.  However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.</p> <ol> <li> <p>You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License.  Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p> </li> <li> <p>You are not required to accept this License, since you have not signed it.  However, nothing else grants you permission to modify or distribute the Program or its derivative works.  These actions are prohibited by law if you do not accept this License.  Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.</p> </li> <li> <p>Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions.  You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.</p> </li> <li> <p>If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all.  For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.</p> </li> </ol> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <ol> <li> <p>If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the body of this License.</p> </li> <li> <p>The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> </li> </ol> <p>Each version is given a distinguishing version number.  If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.</p> <ol> <li> <p>If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission.  For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this.  Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p> <pre><code>                    NO WARRANTY\n</code></pre> </li> <li> <p>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> </li> <li> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <pre><code>             END OF TERMS AND CONDITIONS\n\n    How to Apply These Terms to Your New Programs\n</code></pre> </li> </ol> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program is interactive, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>Gnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate parts of the General Public License.  Of course, the commands you use may be called something other than <code>show w' and</code>show c'; they could even be mouse-clicks or menu items--whatever suits your program.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary.  Here is a sample; alter the names:</p> <p>Yoyodyne, Inc., hereby disclaims all copyright interest in the program   `Gnomovision' (which makes passes at compilers) written by James Hacker.</p> <p>, 1 April 1989   Ty Coon, President of Vice <p>This General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.</p>"},{"location":"maintainer-guide/","title":"Maintainer Guide","text":""},{"location":"maintainer-guide/#project-layout","title":"Project layout","text":"Project structure<pre><code>\u251c\u2500\u2500 docker-compose.yml # Config to tag and run the image container\n\u251c\u2500\u2500 Dockerfile         # Instructions to build the image\n\u251c\u2500\u2500 docs/              # Contains documentation pages\n\u251c\u2500\u2500 mkdocs.yml         # MkDocs configs\n\u251c\u2500\u2500 pyproject.toml     # Poetry configs\n\u251c\u2500\u2500 requirements.txt   # Python packages list (generated)\n\u2514\u2500\u2500 scripts\n \u00a0\u00a0 \u2514\u2500\u2500 export_requirements.sh # Generates the requirements file\n</code></pre> <p>We are following this guide for multiplatform builds. It recommends a matrix strategy if we ever need to add more platforms.</p>"},{"location":"maintainer-guide/#how-to-run-mkdocs","title":"How to run MkDocs","text":"<p>These are the ways to run MkDocs within this project.</p> DockerLocal install (pip)Local install (poetry)"},{"location":"maintainer-guide/#docker","title":"Docker","text":"<p>This option is required for the other maintenance steps below.</p> <ol> <li> <p>Build the image</p> <pre><code>docker-compose build\n</code></pre> </li> <li> <p>Start the container</p> <pre><code>docker-compose up\n</code></pre> </li> <li> <p>Open a browser to <code>http://localhost:8000/</code> to view the documentation locally</p> </li> <li> <p>Modify the files in the <code>docs/</code> directory. The site will auto update when the files are saved.</p> </li> <li> <p>Quit</p> <p>Ctrl+C to quit the local server and stop the container</p> </li> </ol>"},{"location":"maintainer-guide/#local-install-pip","title":"Local Install (pip)","text":"<p>python should be version 3</p> <ol> <li> <p>Install mkdocs</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> <li> <p>Start the local server</p> <pre><code>mkdocs serve -a localhost:8000\n</code></pre> </li> <li> <p>Open a browser to <code>http://localhost:8000/</code> to view the documentation locally</p> </li> <li> <p>Modify the files in the <code>docs/</code> directory. The site will auto update when the files are saved.</p> </li> <li> <p>Quit</p> <p>Ctrl+C to quit mkdocs</p> </li> </ol>"},{"location":"maintainer-guide/#local-install-poetry","title":"Local Install (poetry)","text":"<p>python poetry must be installed in the local system. We recommend installing via pipx into an isolated environment.</p> <ol> <li> <p>Install mkdocs</p> <pre><code>poetry install\n</code></pre> </li> <li> <p>Start the local server</p> <pre><code>poetry run mkdocs serve -a localhost:8000\n</code></pre> </li> <li> <p>Open a browser to <code>http://localhost:8000/</code> to view the documentation locally</p> </li> <li> <p>Modify the files in the <code>docs/</code> directory. The site will auto update when the files are saved.</p> </li> <li> <p>Quit</p> <p>Ctrl+C to quit mkdocs</p> </li> </ol>"},{"location":"maintainer-guide/#how-to-update-the-package-versions","title":"How to update the package versions","text":"<p>Staying updated may give us speed improvements (python), better security, and bugfixes. Docker hub, for example, can scan image layers to find packages with security advisories. These are the steps to update the package versions.</p> <ol> <li> <p>Add poetry to the container</p> </li> <li> <p>Update packages using poetry</p> <pre><code>docker-compose exec mkdocs sh -c \"poetry update\"\n</code></pre> </li> <li> <p>Export <code>requirements.txt</code></p> scriptcommand <pre><code>./scripts/export_requirements.sh\n</code></pre> <pre><code># (1)!\ndocker-compose exec mkdocs \\\npoetry export -f requirements.txt &gt; requirements.txt # (2)!\n</code></pre> <ol> <li>This docker-compose command runs the second line inside the docker container</li> <li>Export in requirements.txt format, to requirements.txt.</li> </ol> </li> <li> <p>Commit the requirements file</p> <pre><code>git add requirements.txt poetry.lock\ngit commit -m\"chore: update package versions\"\n</code></pre> </li> <li> <p>Once merged into <code>main</code>, the CI will build the new image and upload it with the <code>latest</code> tag.</p> </li> </ol>"},{"location":"maintainer-guide/#how-to-add-an-mkdocs-plugin","title":"How to add an MkDocs plugin","text":"<p>Let's say we want to add the <code>mkdocs-multirepo-plugin</code>.</p> <ol> <li> <p>Add poetry to the container</p> </li> <li> <p>Install the new MkDocs plugin</p> <pre><code>docker-compose exec mkdocs sh -c \"poetry add mkdocs-multirepo-plugin\"\n</code></pre> </li> <li> <p>Export <code>requirements.txt</code></p> scriptcommand <pre><code>./scripts/export_requirements.sh\n</code></pre> <pre><code># (1)!\ndocker-compose exec mkdocs \\\npoetry export -f requirements.txt &gt; requirements.txt # (2)!\n</code></pre> <ol> <li>This docker-compose command runs the second line inside the docker container</li> <li>Export in requirements.txt format, to requirements.txt.</li> </ol> </li> <li> <p>Add any system dependencies in the <code>Dockerfile</code></p> <p>We're adding git here, which is a dependency of mkdocs-multirepo-plugin</p> Dockerfile<pre><code>...\n# install system dependencies\nRUN \\\n  --mount=type=cache,target=/var/cache \\\n  apk add \\\n  git=2.40.1-r0\n# (1)!\n...\n</code></pre> <ol> <li>Mount the <code>/var/cache</code> directory as cache in docker when running the command</li> </ol> </li> <li> <p>Commit <code>requirements.txt</code> and <code>Dockerfile</code></p> <pre><code>git add requirements.txt Dockerfile pyproject.toml poetry.lock\ngit commit -m\"feat: add plugin mkdocs-multirepo-plugin\"\n</code></pre> </li> <li> <p>Once merged into <code>main</code>, the CI will build the new image and upload it with the <code>latest</code> tag.</p> </li> </ol> How we set it up"},{"location":"maintainer-guide/#setup-from-scratch","title":"Setup from scratch","text":"<p>Here's the recommended setup, from our experience setting it up.</p>"},{"location":"maintainer-guide/#project-directory","title":"Project directory","text":"<pre><code>mkdir mkdocs-notes &amp;&amp; cd $_\n</code></pre>"},{"location":"maintainer-guide/#poetry-project","title":"Poetry project","text":"<pre><code>poetry init \u2014name docs \u2014description \u201cProject Documentation\u201d # (1)!\n# use a modern stable python like version 3.11.4\n# don\u2019t define dependencies interactively\n</code></pre> <ol> <li>We chose poetry because it performs multiple useful functions such as creating the virtual environment and dependency management. It will be easy to update to the latest versions of dependencies.</li> </ol>"},{"location":"maintainer-guide/#mkdocs-package","title":"Mkdocs package","text":"<pre><code>poetry run poetry add mkdocs\n</code></pre>"},{"location":"maintainer-guide/#mkdocs-project","title":"Mkdocs project","text":"<pre><code>mkdocs new . # creates mkdocs project in current directory\n</code></pre>"},{"location":"maintainer-guide/#local-dev-server","title":"Local dev server","text":"<pre><code>mkdocs serve \u2014dev-addr 0.0.0.0:8000 # (1)!\n</code></pre> <ol> <li>Start the dev server locally on any address on port 8000. This is useful for development from a different local network computer, where the default localhost won\u2019t work</li> </ol>"},{"location":"maintainer-guide/#material-theme","title":"Material theme","text":"<pre><code>poetry add mkdocs-material\ncat \"theme: material\" &gt;&gt; mkdocs.yml\ngit ci -a -m\"setup material theme for mkdocs\"\n</code></pre>"},{"location":"maintainer-guide/#multirepo-not-yet-working","title":"Multirepo (not yet working)","text":"<pre><code>poetry add mkdocs-multirepo-plugin\n# add the plugin in mkdocs.yml\n# import the other repos in mkdocs.yml\n</code></pre>"},{"location":"maintainer-guide/#export-requirements","title":"Export requirements","text":"<p>We need to export the requirements whenever we add a new package, so that the docker setup and pip users can know to use it.</p> <pre><code># (1)!\npoetry export -f requirements.txt &gt; requirements.txt\n</code></pre> <ol> <li>This is also contained in a script <code>export_requirements.sh</code> in the scripts directory</li> </ol>"},{"location":"maintainer-guide/#deployment-to-github-pages","title":"Deployment to Github Pages","text":"<p>We closely followed this guide. This setup creates a gh-pages branch to store the latest docs. Make the necessary configurations in the Github repo settings as necessary under Pages.</p>"},{"location":"maintainer-guide/#docker-setup","title":"Docker setup","text":"<p>We modified the dockerfile and docker-compose files from People Depot to install and serve mkdocs locally. The files are <code>docker-compose.yml</code> and <code>Dockerfile</code>.</p>"},{"location":"poetry/","title":"Poetry","text":"<p>Poetry is a virtual environment and dependency manager, builder and publisher for python. We are using it as a tool to update our python dependencies.</p> <p>The configuration file, <code>pyproject.toml</code> in the project root, contains the list of dependencies. From there, we can export a <code>requirements.txt</code> file for use with pip, which we use in our <code>Dockerfile</code>.</p>"},{"location":"poetry/#how-to-add-poetry-to-the-running-container","title":"How to add poetry to the running container","text":"<p>Adding poetry to the running container lets us manage project dependencies without installing it on the host machine. Not adding it to the docker image keeps the image smaller.</p> <ol> <li> <p>Make sure the container is running</p> <pre><code>docker-compose up -d # (1)!\n</code></pre> <ol> <li>This runs the container in background (daemon) mode</li> </ol> </li> <li> <p>Install poetry inside the running container</p> <pre><code>docker-compose exec mkdocs pip install poetry # (1)!\n</code></pre> <ol> <li>Runs <code>pip install poetry</code> in the mkdocs service container</li> </ol> <p>Now we can call poetry that's in the image</p> </li> <li> <p>Use poetry for dependency management or other purposes.</p> </li> <li> <p>Take down the container when done</p> <pre><code>docker-compose down # (1)!\n</code></pre> <ol> <li>This stops and deletes the container. The poetry install is gone as well. If we don't want to delete the container, use <code>docker-compose stop</code>.</li> </ol> </li> </ol>"},{"location":"poetry/#how-to-add-poetry-to-the-image","title":"How to add poetry to the image","text":"<p>Adding poetry to the image lets us manage the project dependencies without installing it on the host machine.</p> <ol> <li> <p>Add poetry to Dockerfile</p> Dockerfile<pre><code>...\n# install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nRUN pip install --no-cache-dir poetry==1.5.1\n...\n</code></pre> </li> <li> <p>Build the image</p> <pre><code>docker-compose build\n</code></pre> <p>Now we can call poetry that's in the image</p> </li> </ol>"},{"location":"poetry/#how-to-add-a-package","title":"How to add a package","text":"<p>We use <code>pyproject-fmt</code> as an example. <code>pyproject-fmt</code> is an auto-formatter for the pyproject.toml configuration file.</p> <ol> <li>Get a shell inside the container</li> </ol> <pre><code>docker-compose run mkdocs sh\n</code></pre> <ol> <li>Install and run the package</li> </ol> <pre><code>pip install pyproject-fmt\npyproject-fmt pyproject.toml\n</code></pre>"},{"location":"poetry/#how-to-add-package-to-a-group","title":"How to add package to a group","text":"<p>Organizing packages into groups allows better organization of dependencies. For example, dev dependencies and docs dependencies as opposed to the ones for the main application.</p> <pre><code>poetry add pytest --group dev\n</code></pre>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#introduction","title":"Introduction","text":""},{"location":"user-guide/#what-is-it","title":"What is it","text":"<p>Mkdocs is a static site generator for documentation that converts markdown to html.</p>"},{"location":"user-guide/#why-we-use-it","title":"Why we use it","text":"<p>It comes with tools to help create documentation that's pleasing to read and easy to maintain.</p> Here's a list of useful features not available in plain markdown Dead link checker <p>Github wiki doesn't check for broken links.</p> Tabbed content LinuxMac <p>linux-specific content</p> <p>mac-specific content</p> Site table of contents <p>See the contents of the site in the left sidebar.</p> Per-page table of contents <p>See the contents of the current page in the right sidebar.</p> Code and text annotations <pre><code>Click the plus sign --&gt; # (1)!\n</code></pre> <ol> <li>This is an explanation text</li> </ol> Expandable text blocks <p>That's what this box is!</p>"},{"location":"user-guide/#why-we-made-a-docker-image-for-it","title":"Why we made a docker image for it","text":"<p>We want to make it very easy for Hack for LA projects to maintain documentation. Having a docker image allows:</p> <ul> <li>Hack for LA<ul> <li>one location to setup and update the mkdocs installation for all projects</li> </ul> </li> <li>Projects<ul> <li>to save time on mkdocs setup</li> <li>the flexibility to customize configuration</li> </ul> </li> <li>Developers<ul> <li>to save time by not having to install mkdocs locally</li> <li>to use a simple command to serve and work on documentation</li> </ul> </li> </ul>"},{"location":"user-guide/#mkdocs-docker-image","title":"Mkdocs docker image","text":""},{"location":"user-guide/#how-to-use-it","title":"How to use it","text":""},{"location":"user-guide/#add-it-to-a-project","title":"Add it to a project","text":""},{"location":"user-guide/#setup-the-local-mkdocs-service","title":"Setup the local mkdocs service","text":"<ol> <li> <p>Create <code>docker-compose.yml</code>.</p> docker-compose.yml<pre><code>version: \"3.9\"\nservices:\n  mkdocs:\n    image: hackforlaops/mkdocs:latest # (1)!\n    # build:\n    #   context: .\n    #   dockerfile: Dockerfile\n    command: mkdocs serve -a \"0.0.0.0:8000\" # (2)!\n    ports:\n      - \"8005:8000\" # (3)!\n    volumes:\n      - .:/app # (4)!\n</code></pre> <ol> <li>Use the pre-built image file from this project.</li> <li>Expose the site to all IPs. This enables browsing the site from another local computer.</li> <li>Expose the site on port 8005, in case 8000 is in use by the project.</li> <li>Map the current directory to the <code>/app</code> directory in the container. The current directory is expected to have a <code>docs/</code> directory.</li> </ol> </li> </ol>"},{"location":"user-guide/#setup-the-mkdocs-project","title":"Setup the mkdocs project","text":"Create a new oneCopy an existing one <p>Use the docker image to create the new project</p> <pre><code>docker-compose run mkdocs \\\nmkdocs new . # (1)!\n</code></pre> <ol> <li>docker-compose run executes a command from a new docker image container. In this case, inside the mkdocs container, execute <code>mkdocs new .</code> (note the period for the current directory).</li> </ol> <ol> <li>Copy the <code>mkdocs.yml</code> and the <code>docs/</code> directory from an existing repo, such as this one.</li> <li>Update the configurations in <code>mkdocs.yml</code> to your project's info.</li> </ol>"},{"location":"user-guide/#work-on-docs-locally","title":"Work on docs locally","text":"<ol> <li> <p>Run the mkdocs server from the container</p> <pre><code>docker-compose up # (1)!\n</code></pre> <ol> <li>Optionally use the <code>-d</code> flag to run the container in the background</li> </ol> </li> <li> <p>Open a browser to <code>http://localhost:8005/</code> to view the documentation locally</p> </li> <li> <p>Modify the files in the docs directory. The site will auto-update when the files are saved.</p> </li> <li> <p>Quit</p> <p>Ctrl+C to quit the local server and stop the container</p> </li> </ol>"},{"location":"user-guide/#extend-the-image","title":"Extend the image","text":"<p>If your project wants to try other mkdocs plugins not in the hackforla image, here's a way to extend the image on your own before asking to add it to the hackforla image.</p> <p>The hackforla image is built from hackforla/mkdocs-docker, where the mkdocs plugins are listed in <code>pyproject.toml</code>.</p>"},{"location":"user-guide/#get-poetry","title":"Get poetry","text":"<ol> <li> <p>Add your own <code>Dockerfile</code> to install the plugin for local usage that also installs poetry</p> Dockerfile.mkdocs<pre><code># base image\nFROM hackforlaops/mkdocs:latest\n\n# set work directory\nWORKDIR /app\n\n# install system dependencies\n# (2)!\n#RUN \\\n#  --mount=type=cache,target=/var/cache \\\n#  apk add \\\n#  # mkdocs-multirepo-plugin requires this\n#  git=2.40.1-r0\n\n# install dependencies\n# (1)!\nCOPY requirements.txt .\nRUN \\\n  --mount=type=cache,target=/root/.cache \\\n  pip install -r requirements.txt\nRUN \\\n  --mount=type=cache,target=/root/.cache \\\n  pip install poetry==1.6.1\n</code></pre> <ol> <li>Python plugins should be specified in requirement.txt to be installed.</li> <li>Remove or comment out the block unless the plugin requires non-python packages.</li> </ol> </li> <li> <p>Reference the new Dockerfile in the docker-compose file</p> docker-compose.yml<pre><code>...\n  mkdocs:\n      #image: hackforlaops/mkdocs:latest\n      build:\n        context: .\n        dockerfile: Dockerfile.mkdocs\n...\n</code></pre> </li> <li> <p>Build the image.</p> <pre><code>docker-compose build\n</code></pre> </li> </ol>"},{"location":"user-guide/#add-the-new-plugin","title":"Add the new plugin","text":"<p>Now that we have poetry, we can use it to add the plugin.</p> <ol> <li> <p>Create a pyproject.yml similar to the one in this repo.</p> Generate one using poetryCopy or create one manually <pre><code>docker-compose run mkdocs poetry init # (1)!\n</code></pre> <ol> <li>Do not call the project <code>mkdocs</code> since that's the name of a real project.</li> </ol> pyproject.yml<pre><code>[tool.poetry]\nname = \"project-name\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = []\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.11.4\" # (1)!\n\n[build-system]\nbuild-backend = \"poetry.core.masonry.api\"\nrequires = [\n  \"poetry-core\",\n]\n</code></pre> <ol> <li>This is the python version in the <code>hackforla/docker-mkdocs/pyproject.toml</code> file. It can also be the version that's in the <code>hackforla/docker-mkdocs/Dockerfile</code>.</li> </ol> </li> <li> <p>Add the new plugin</p> <pre><code># (1)!\ndocker-compose run mkdocs \\\npoetry add mkdocs-awesome-pages-plugin --group docs # (2)!\n</code></pre> <ol> <li>This docker-compose command runs the second line inside the docker container</li> <li>Add (install) mkdocs-awesome-pages to pyproject.toml under the docs group. This is in case your project also uses poetry and need to separate the docs dependencies from the rest.</li> </ol> </li> </ol>"},{"location":"user-guide/#build-the-image","title":"Build the image","text":"<ol> <li> <p>Export the requirements.txt</p> <pre><code>docker-compose run mkdocs \\\npoetry export -f requirements.txt --without-hashes --with docs &gt; requirements.txt # (1)!\n</code></pre> <ol> <li>Export dependencies, including the docs group, in requirements.txt format, to requirements.txt.</li> </ol> </li> <li> <p>Build and run the docker image with the new plugin</p> <pre><code>docker-compose up --build\n</code></pre> </li> </ol>"},{"location":"user-guide/#use-the-plugin","title":"Use the plugin","text":"<ol> <li>Add any configuration to <code>mkdocs.yml</code></li> <li>Use the plugin in the documentation</li> <li>Test that the plugin works</li> </ol>"},{"location":"user-guide/#add-it-to-the-hackforla-image","title":"Add it to the hackforla image","text":"<p>If the plugin works well for your project, and you would like it to be added at the organization level. Please do as much of the following as you can.</p> <ol> <li>Create a documentation page about the plugin: What it is, how it's useful, how to use it. etc..</li> <li>Create a PR in <code>hackforla/docker-mkdocs</code> with the necessary changes to add the plugin, including the documentation page.</li> <li>Follow up in slack, maybe in the hackforla #engineering channel.</li> </ol>"}]}